package main

import (
    "fmt"
    "net/http"
    //"github.com/Sirupsen/logrus"
    //"github.com/sebest/logrusly"
    "encoding/json"
    "io/ioutil"

)

type AutoGenerated struct {
	Data struct {
		Type string `json:"type"`
		Attributes struct {
			GameModeStats struct {
				SoloFpp struct {
					Assists             int     `json:"assists"`
					BestRankPoint       float64 `json:"bestRankPoint"`
					Boosts              int     `json:"boosts"`
					DBNOs               int     `json:"dBNOs"`
					DailyKills          int     `json:"dailyKills"`
					DailyWins           int     `json:"dailyWins"`
					DamageDealt         float64 `json:"damageDealt"`
					Days                int     `json:"days"`
					HeadshotKills       int     `json:"headshotKills"`
					Heals               int     `json:"heals"`
					KillPoints          int     `json:"killPoints"`
					Kills               int     `json:"kills"`
					LongestKill         float64 `json:"longestKill"`
					LongestTimeSurvived float64 `json:"longestTimeSurvived"`
					Losses              int     `json:"losses"`
					MaxKillStreaks      int     `json:"maxKillStreaks"`
					MostSurvivalTime    float64 `json:"mostSurvivalTime"`
					RankPoints          int     `json:"rankPoints"`
					RankPointsTitle     string  `json:"rankPointsTitle"`
					Revives             int     `json:"revives"`
					RideDistance        float64 `json:"rideDistance"`
					RoadKills           int     `json:"roadKills"`
					RoundMostKills      int     `json:"roundMostKills"`
					RoundsPlayed        int     `json:"roundsPlayed"`
					Suicides            int     `json:"suicides"`
					SwimDistance        int     `json:"swimDistance"`
					TeamKills           int     `json:"teamKills"`
					TimeSurvived        float64 `json:"timeSurvived"`
					Top10S              int     `json:"top10s"`
					VehicleDestroys     int     `json:"vehicleDestroys"`
					WalkDistance        float64 `json:"walkDistance"`
					WeaponsAcquired     int     `json:"weaponsAcquired"`
					WeeklyKills         int     `json:"weeklyKills"`
					WeeklyWins          int     `json:"weeklyWins"`
					WinPoints           int     `json:"winPoints"`
					Wins                int     `json:"wins"`
				} `json:"solo-fpp"`
            }`json: "GameModeStats"`
        }`json: "attributes"`
    }`json: "data"`
}

func apiRequest() *http.Response {
    url := "https://api.pubg.com/shards/steam/players/account.ab3ebdd2cbe44e5996bad678dd15ac3b/seasons/lifetime"

   // Create a Bearer string by appending string access token
   var bearer = "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJqdGkiOiI0NTU1YTNhMC0wYWNlLTAxMzctZDgzZS01OTE5NGVkMTExNzMiLCJpc3MiOiJnYW1lbG9ja2VyIiwiaWF0IjoxNTQ5MzAwNDc2LCJwdWIiOiJibHVlaG9sZSIsInRpdGxlIjoicHViZyIsImFwcCI6ImJhZ3VubmVyMzAwIn0.7SZyFCrSf9_LaoSdmqSJ-IqGj9ONcTs1ehPFlTp05Rw"
   var the = "application/vnd.api+json"
   // Create a new request using http
   req, err := http.NewRequest("GET", url, nil)

   // add authorization header to the req
   req.Header.Add("Authorization", bearer)
   req.Header.Add("Accept", the)

   // Send req using http Client
   client := &http.Client{}
   resp, err := client.Do(req)
   if err != nil {
       fmt.Println("Error on response.\n[ERRO] -", err)
   }

   return resp
}

func main() {

    response := apiRequest()

    fmt.Println("Successfully Opened")
    defer response.Body.Close()

    byteValue, _ := ioutil.ReadAll(response.Body)

    var stats AutoGenerated

    json.Unmarshal(byteValue, &stats)

    fmt.Println(stats)

}
